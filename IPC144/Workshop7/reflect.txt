///////////////////////////////////////////////////////////////////////////
                               Reflection
                             Workshop - #7
Full Name  : Abcedi Ilacas
Student ID#: 138180211

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
///////////////////////////////////////////////////////////////////////////
1) I was successful in coding non repetitive sections of logic in the game play portion of the workshop by carefully planning the flow of the game. I ensured that each section of the game, like drawing the board, player position, and the rules, was coded once and only the necessary parts were executed during each turn. Initially, I found it challenging to identify which parts of the code were repeating because everything seemed essential. However, after stepping back and looking at the overall flow, I was able to rearrange the logic so that repetition was minimized. It took some trial and error to organize the code this way, but it was effective in the end. 

2) Structures simplified my program by consolidating related data into single, manageable units. Without structures, I would have had multiple loose variables which could lead to confusion and errors. For example, by using a structure to represent a player, I could keep the player's name, score, and position together, making it easier to handle player data as a single unit rather than as disparate, unrelated variables. The structures helped me think of players, and other elements as objects with properties, which is a cornerstone of organized and strategic programming. The impact was clear: my code was more organized, and I spent less time debugging issues related to mismatched or incorrectly updated variables. 

3) The maximum nesting level in my code was three. Here is the structure of that nesting, illustrated as an outline: 

if(condition1) 
{ 
 	while(condition2) 

	{ 
        		if(condition3) 

 			{ 

			} 
 	 } 
} 
 

The triple nesting occurred in a crucial part of the game logic where several conditions had to be checked and met. To ensure clarity, I kept close track of each opening and closing brace and commented each condition to remember the nesting context, preventing confusion that too much nesting can often cause. 

 
