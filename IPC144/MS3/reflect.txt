/*/////////////////////////////////////////////////////////////////////////
                        Assignment 1 - Reflection

Full Name  : Abcedi Ilacas
Student ID#: 138180211
Email      : ailacas1@myseneca.ca
Section    : NBB

Authenticity Declaration:
I declare this submission is the result of my own work and has not been
shared with any other student or 3rd party content provider. This submitted
piece of work is entirely of my own creation.
/////////////////////////////////////////////////////////////////////////*/

1.
void bubbleSort(struct Appointment* app);
In my project, implementing the bubbleSort function was a crucial step in simulating an efficient management system for the veterinary clinic.
The function's role was to order appointments chronologically, a core requirement for any appointment-based system.
In a hypothetical busy clinic scenario, unsorted appointments could lead to confusion and inefficiencies.
By integrating bubbleSort, I was able to demonstrate how such a function could streamline operations, making it easier to locate and manage appointments.
This experience highlighted the importance of data organization in software systems, particularly in environments where time and accuracy are critical.

void viewAllAppointments(struct ClinicData* dataEntry);
Creating the viewAllAppointments function was essential for the user interface of my clinic management system.
The goal was to present all appointments in a clear, tabular format for easy reference.
Imagining a scenario in a bustling clinic, this function would enable staff to quickly assess and prepare for upcoming appointments, enhancing operational efficiency.
It was a valuable exercise in understanding how data presentation directly impacts user experience and system usability.
This function was a testament to the importance of clear and organized data display in any application where scheduling is a key component.

void inputPhoneData(struct Phone* phone);
The development of the inputPhoneData function was a response to the need for accurate and consistent data entry, especially for contact information.
In a simulated clinic setting, where prompt communication is often crucial, this function would ensure that phone numbers are entered correctly and formatted consistently.
For instance, if a user entered an incomplete or incorrect phone number, the function's validation mechanism would prompt for a correction.
This aspect of the project taught me the significance of meticulous data validation in software development, especially in applications where reliable information is crucial for operations and communication.

Through these functions, I gained a deeper understanding of how specific features and algorithms can significantly enhance the functionality and user experience of a software application.


2.
In the development of my client.c source code for a veterinary clinic management system, I strategically minimized the use of the scanf function, a decision driven by the need for secure and reliable user input handling.
scanf, although commonly used for basic input tasks, presents challenges, particularly with buffer overflows and handling unexpected input formats, which can lead to serious issues like data corruption or crashes.

To address these concerns, I replaced scanf with custom, type-specific input functions.
This approach significantly increased control over the input process, adding robust validation and error checking.
For instance, my inputInt function specifically caters to integer inputs, rigorously checking for non-integer characters and out-of-range values.
This not only prevents incorrect data entry but also enhances the system's stability by eliminating common errors associated with scanf.

These specialized functions improve the user experience, especially important in a clinical context where efficiency and accuracy are paramount.
Centralizing input handling also simplifies code maintenance and scalability.
Any future changes or additional validation rules can be implemented in one place, offering a streamlined, efficient approach to handling user input across the system.
This design choice reflects a commitment to creating a user-friendly, robust, and maintainable software solution.


3.
The placement of bubbleSort in the clinic.c module was a deliberate choice.
This module handles all appointment-related functionalities, and thus it was logical to include the sorting function here.
The decision was reinforced by considering the cohesion of appointment-related operations within a single module, promoting easier maintenance and potential future enhancements.

Similarly, viewAllAppointments was placed in the clinic.c module.
This decision was driven by the function's direct interaction with the clinic's appointment data.
Keeping display and data manipulation functions in close proximity within the same module aligns with the principles of modular programming and improves code readability.

The inputPhoneData function was included in the core.c module because of its general utility nature.
This function is not specific to clinic operations but is a part of broader user input handling, making core.c the most appropriate location for it.
Placing it in the core module allows for potential reuse across different parts of the application, demonstrating the versatility and reusability of well-designed functions.

The development of these functions and their integration into specific modules of the application not only addressed immediate functional requirements but also contributed to the overall robustness, user-friendliness, and maintainability of the system.


